---
AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Fargate + ALB for Currency Exchange API

Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String
  DatabaseEndpoint:
    Type: String
    Default: "localhost"
  RedisEndpoint:
    Type: String  
    Default: "localhost" 
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  ContainerImage:
    Type: String
    Description: Docker image URI from ECR
  ContainerPort:
    Type: Number
    Default: 8000

Resources:
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}-${Environment}"
      RetentionInDays: 30

  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-alb-sg"

  # Security Group for ECS Tasks
  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to ECS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ecs-task-sg"

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-alb"
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-alb"

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-tg"
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckEnabled: true
      HealthCheckPath: "/health"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200"
      # Add explicit target group attributes
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ProjectName}-${Environment}-cluster"

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-ecs-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ProjectName}-${Environment}-task"
      RequiresCompatibilities: [FARGATE]
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: api
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          Essential: true
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: DEBUG
              Value: "false"
            - Name: LOG_LEVEL
              Value: INFO
            - Name: PORT
              Value: "8000"
            - Name: DATABASE_HOST
              Value: !Ref DatabaseEndpoint
            - Name: REDIS_HOST
              Value: !Ref RedisEndpoint
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: api
  
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub "${ProjectName}-${Environment}-service"
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref TaskSecurityGroup]
          Subnets: !Ref PublicSubnetIds
      LoadBalancers:
        - ContainerName: api
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGroup
      HealthCheckGracePeriodSeconds: 120 
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

Outputs:
  ApplicationUrl:
    Description: Public URL of the API
    Value: !Sub "http://${ALB.DNSName}"
    Export:
      Name: !Sub "${AWS::StackName}-app-url"

  ALBDNSName:
    Description: ALB DNS name
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-alb-dns"

  ClusterName:
    Description: ECS Cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-cluster-name"

  ServiceName:
    Description: ECS Service name
    Value: !Ref ECSService
    Export:
      Name: !Sub "${AWS::StackName}-service-name"

  TaskDefinitionArn:
    Description: ECS Task Definition ARN
    Value: !Ref ECSTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-task-definition"
